#!/usr/bin/env python
# Copyright (c) 2010-2012 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import sys

from eventlet import GreenPool
import eventlet.debug
eventlet.debug.hub_exceptions(True)

from swift.common.direct_client import direct_put_container_object
from swift.common.ring import Ring
from swift.common.utils import normalize_timestamp


def direct_put_container_entry(container_ring, account_name, container_name,
                               object_name, headers=None):
    """
    Talk directly to the primary container servers to put a particular object
    in the listing. Does not talk to object servers; use this only when a
    container entry does not actually have a corresponding object.
    """
    pool = GreenPool()
    part, nodes = container_ring.get_nodes(account_name, container_name)
    for node in nodes:
        pool.spawn_n(direct_put_container_object, node, part, account_name,
                     container_name, object_name, headers=headers)

    pool.waitall()


def enqueue(container_ring, spi, path, timestamp):
    container = str(int(float(timestamp) // 3600 * 3600))
    obj = '%s:%s' % (spi, path)
    timestamp = normalize_timestamp(timestamp)
    headers = {
        'x-timestamp': timestamp,
        'x-content-type': 'text/plain',
        'x-size': 0,
        'x-etag': 'd41d8cd98f00b204e9800998ecf8427e',  # empty
    }
    direct_put_container_entry(container_ring,
                               '.misplaced_objects', container, obj,
                               headers=headers)


def main():
    try:
        spi, path, timestamp = sys.argv[1:]
    except ValueError:
        return 'USAGE: enqueue.py <spi> </a/c/o> <timestamp>'
    container_ring = Ring('/etc/swift/container.ring.gz')
    enqueue(container_ring, spi, path, timestamp)


if __name__ == "__main__":
    sys.exit(main())
